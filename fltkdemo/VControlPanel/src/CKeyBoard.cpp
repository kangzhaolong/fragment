// generated by Fast Light User Interface Designer (fluid) version 1.0305

#include "include/CKeyBoard.h"

int main(int args,char** argv) {
  DBusError dberr;  
  DBusConnection *dbconn;  
  DBusMessage *dbmsg;  
  char *text;  
  
  dbus_error_init (&dberr);  
  dbconn = dbus_bus_get (DBUS_BUS_SESSION, &dberr);  //代表连接到会话总线，如果需要连接到  
  if (dbus_error_is_set (&dberr)) {  
  	fprintf (stderr, "getting session bus failed: %s\n", dberr.message);  
  	dbus_error_free (&dberr);  
  	return EXIT_FAILURE;  
  }
  CVKeyBoard v(0,0,300,170);
  v.show();
  Fl::run();
}

void CVKeyBoard::cb_UP_i(Fl_Button*, void*) {
  printf("Key UP\n");
m_Lable->value("UP");
}
void CVKeyBoard::cb_UP(Fl_Button* o, void* v) {
  ((CVKeyBoard*)(o->parent()->parent()->parent()))->cb_UP_i(o,v);
}

void CVKeyBoard::cb_LEFT_i(Fl_Button*, void*) {
  printf("Key LEFT\n");
m_Lable->value("LEFT");
}
void CVKeyBoard::cb_LEFT(Fl_Button* o, void* v) {
  ((CVKeyBoard*)(o->parent()->parent()->parent()->parent()))->cb_LEFT_i(o,v);
}

void CVKeyBoard::cb_RIGHT_i(Fl_Button*, void*) {
  printf("Key RIGHT\n");
m_Lable->value("RIGHT");
}
void CVKeyBoard::cb_RIGHT(Fl_Button* o, void* v) {
  ((CVKeyBoard*)(o->parent()->parent()->parent()->parent()))->cb_RIGHT_i(o,v);
}

void CVKeyBoard::cb_DOWN_i(Fl_Button*, void*) {
  printf("Key DOWN\n");
m_Lable->value("DOWN");
}
void CVKeyBoard::cb_DOWN(Fl_Button* o, void* v) {
  ((CVKeyBoard*)(o->parent()->parent()->parent()))->cb_DOWN_i(o,v);
}

void CVKeyBoard::cb_A_i(Fl_Button*, void*) {
  printf("Key A\n");
m_Lable->value("A");
}
void CVKeyBoard::cb_A(Fl_Button* o, void* v) {
  ((CVKeyBoard*)(o->parent()->parent()->parent()))->cb_A_i(o,v);
}

void CVKeyBoard::cb_B_i(Fl_Button*, void*) {
  printf("Key B\n");
m_Lable->value("B");
}
void CVKeyBoard::cb_B(Fl_Button* o, void* v) {
  ((CVKeyBoard*)(o->parent()->parent()->parent()))->cb_B_i(o,v);
}

void CVKeyBoard::cb_C_i(Fl_Button*, void*) {
  printf("Key C\n");
m_Lable->value("C");
}
void CVKeyBoard::cb_C(Fl_Button* o, void* v) {
  ((CVKeyBoard*)(o->parent()->parent()->parent()))->cb_C_i(o,v);
}

void CVKeyBoard::cb_D_i(Fl_Button*, void*) {
  printf("Key C\n");
m_Lable->value("D");
}
void CVKeyBoard::cb_D(Fl_Button* o, void* v) {
  ((CVKeyBoard*)(o->parent()->parent()->parent()))->cb_D_i(o,v);
}

void CVKeyBoard::cb_E_i(Fl_Button*, void*) {
  printf("Key E\n");
m_Lable->value("E");
}
void CVKeyBoard::cb_E(Fl_Button* o, void* v) {
  ((CVKeyBoard*)(o->parent()->parent()->parent()))->cb_E_i(o,v);
}
CVKeyBoard::CVKeyBoard(int X, int Y, int W, int H, const char *L)
  : Fl_Double_Window(X, Y, W, H, L) {
  _CVKeyBoard();
}

CVKeyBoard::CVKeyBoard(int W, int H, const char *L)
  : Fl_Double_Window(0, 0, W, H, L) {
  clear_flag(16);
  _CVKeyBoard();
}

CVKeyBoard::CVKeyBoard()
  : Fl_Double_Window(0, 0, 300, 170, 0) {
  clear_flag(16);
  _CVKeyBoard();
}

void CVKeyBoard::_CVKeyBoard() {
this->box(FL_FLAT_BOX);
this->color(FL_BACKGROUND_COLOR);
this->selection_color(FL_BACKGROUND_COLOR);
this->labeltype(FL_NO_LABEL);
this->labelfont(0);
this->labelsize(14);
this->labelcolor(FL_FOREGROUND_COLOR);
this->align(Fl_Align(FL_ALIGN_TOP));
this->when(FL_WHEN_RELEASE);
{ m_Lable = new Fl_Input(0, 0, 300, 20);
} // Fl_Input* m_Lable
{ Fl_Pack* o = new Fl_Pack(0, 20, 300, 150);
  o->type(1);
  { Fl_Pack* o = new Fl_Pack(0, 20, 200, 150);
    { Fl_Button* o = new Fl_Button(0, 20, 100, 50, "UP");
      o->callback((Fl_Callback*)cb_UP);
    } // Fl_Button* o
    { Fl_Pack* o = new Fl_Pack(0, 50, 200, 50);
      o->type(1);
      { Fl_Button* o = new Fl_Button(0, 70, 100, 50, "LEFT");
        o->callback((Fl_Callback*)cb_LEFT);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(100, 70, 100, 50, "RIGHT");
        o->callback((Fl_Callback*)cb_RIGHT);
      } // Fl_Button* o
      o->end();
    } // Fl_Pack* o
    { Fl_Button* o = new Fl_Button(0, 120, 100, 50, "DOWN");
      o->callback((Fl_Callback*)cb_DOWN);
    } // Fl_Button* o
    o->end();
  } // Fl_Pack* o
  { Fl_Pack* o = new Fl_Pack(200, 20, 100, 150);
    { Fl_Button* o = new Fl_Button(200, 20, 100, 30, "A");
      o->callback((Fl_Callback*)cb_A);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(200, 50, 100, 30, "B");
      o->callback((Fl_Callback*)cb_B);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(200, 80, 100, 30, "C");
      o->callback((Fl_Callback*)cb_C);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(200, 110, 100, 30, "D");
      o->callback((Fl_Callback*)cb_D);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(200, 140, 100, 30, "E");
      o->callback((Fl_Callback*)cb_E);
    } // Fl_Button* o
    o->end();
  } // Fl_Pack* o
  o->end();
} // Fl_Pack* o
end();
}
